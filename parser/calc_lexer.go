// Code generated from Calc.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 35, 171,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33,
	4, 34, 9, 34, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3,
	6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12,
	3, 12, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3,
	17, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3,
	22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3, 27, 3,
	27, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31,
	3, 31, 3, 32, 6, 32, 156, 10, 32, 13, 32, 14, 32, 157, 3, 33, 6, 33, 161,
	10, 33, 13, 33, 14, 33, 162, 3, 34, 6, 34, 166, 10, 34, 13, 34, 14, 34,
	167, 3, 34, 3, 34, 2, 2, 35, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15,
	9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33,
	18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 45, 24, 47, 25, 49, 26, 51,
	27, 53, 28, 55, 29, 57, 30, 59, 31, 61, 32, 63, 33, 65, 34, 67, 35, 3,
	2, 5, 3, 2, 50, 59, 5, 2, 67, 92, 97, 97, 99, 124, 5, 2, 11, 12, 15, 15,
	34, 34, 2, 173, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2,
	9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2,
	2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2,
	2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2,
	2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3,
	2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47,
	3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 2,
	55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2, 59, 3, 2, 2, 2, 2, 61, 3, 2, 2, 2,
	2, 63, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2, 2, 67, 3, 2, 2, 2, 3, 69, 3, 2, 2,
	2, 5, 71, 3, 2, 2, 2, 7, 73, 3, 2, 2, 2, 9, 75, 3, 2, 2, 2, 11, 77, 3,
	2, 2, 2, 13, 79, 3, 2, 2, 2, 15, 81, 3, 2, 2, 2, 17, 83, 3, 2, 2, 2, 19,
	85, 3, 2, 2, 2, 21, 87, 3, 2, 2, 2, 23, 89, 3, 2, 2, 2, 25, 91, 3, 2, 2,
	2, 27, 93, 3, 2, 2, 2, 29, 95, 3, 2, 2, 2, 31, 97, 3, 2, 2, 2, 33, 99,
	3, 2, 2, 2, 35, 101, 3, 2, 2, 2, 37, 104, 3, 2, 2, 2, 39, 110, 3, 2, 2,
	2, 41, 114, 3, 2, 2, 2, 43, 119, 3, 2, 2, 2, 45, 124, 3, 2, 2, 2, 47, 129,
	3, 2, 2, 2, 49, 135, 3, 2, 2, 2, 51, 138, 3, 2, 2, 2, 53, 141, 3, 2, 2,
	2, 55, 143, 3, 2, 2, 2, 57, 146, 3, 2, 2, 2, 59, 148, 3, 2, 2, 2, 61, 151,
	3, 2, 2, 2, 63, 155, 3, 2, 2, 2, 65, 160, 3, 2, 2, 2, 67, 165, 3, 2, 2,
	2, 69, 70, 7, 61, 2, 2, 70, 4, 3, 2, 2, 2, 71, 72, 7, 46, 2, 2, 72, 6,
	3, 2, 2, 2, 73, 74, 7, 42, 2, 2, 74, 8, 3, 2, 2, 2, 75, 76, 7, 43, 2, 2,
	76, 10, 3, 2, 2, 2, 77, 78, 7, 93, 2, 2, 78, 12, 3, 2, 2, 2, 79, 80, 7,
	95, 2, 2, 80, 14, 3, 2, 2, 2, 81, 82, 7, 104, 2, 2, 82, 16, 3, 2, 2, 2,
	83, 84, 7, 125, 2, 2, 84, 18, 3, 2, 2, 2, 85, 86, 7, 127, 2, 2, 86, 20,
	3, 2, 2, 2, 87, 88, 7, 63, 2, 2, 88, 22, 3, 2, 2, 2, 89, 90, 7, 44, 2,
	2, 90, 24, 3, 2, 2, 2, 91, 92, 7, 49, 2, 2, 92, 26, 3, 2, 2, 2, 93, 94,
	7, 45, 2, 2, 94, 28, 3, 2, 2, 2, 95, 96, 7, 47, 2, 2, 96, 30, 3, 2, 2,
	2, 97, 98, 7, 126, 2, 2, 98, 32, 3, 2, 2, 2, 99, 100, 7, 40, 2, 2, 100,
	34, 3, 2, 2, 2, 101, 102, 7, 107, 2, 2, 102, 103, 7, 104, 2, 2, 103, 36,
	3, 2, 2, 2, 104, 105, 7, 121, 2, 2, 105, 106, 7, 106, 2, 2, 106, 107, 7,
	107, 2, 2, 107, 108, 7, 110, 2, 2, 108, 109, 7, 103, 2, 2, 109, 38, 3,
	2, 2, 2, 110, 111, 7, 104, 2, 2, 111, 112, 7, 113, 2, 2, 112, 113, 7, 116,
	2, 2, 113, 40, 3, 2, 2, 2, 114, 115, 7, 103, 2, 2, 115, 116, 7, 110, 2,
	2, 116, 117, 7, 107, 2, 2, 117, 118, 7, 104, 2, 2, 118, 42, 3, 2, 2, 2,
	119, 120, 7, 103, 2, 2, 120, 121, 7, 110, 2, 2, 121, 122, 7, 117, 2, 2,
	122, 123, 7, 103, 2, 2, 123, 44, 3, 2, 2, 2, 124, 125, 7, 118, 2, 2, 125,
	126, 7, 116, 2, 2, 126, 127, 7, 119, 2, 2, 127, 128, 7, 103, 2, 2, 128,
	46, 3, 2, 2, 2, 129, 130, 7, 104, 2, 2, 130, 131, 7, 99, 2, 2, 131, 132,
	7, 110, 2, 2, 132, 133, 7, 117, 2, 2, 133, 134, 7, 103, 2, 2, 134, 48,
	3, 2, 2, 2, 135, 136, 7, 126, 2, 2, 136, 137, 7, 126, 2, 2, 137, 50, 3,
	2, 2, 2, 138, 139, 7, 40, 2, 2, 139, 140, 7, 40, 2, 2, 140, 52, 3, 2, 2,
	2, 141, 142, 7, 62, 2, 2, 142, 54, 3, 2, 2, 2, 143, 144, 7, 62, 2, 2, 144,
	145, 7, 63, 2, 2, 145, 56, 3, 2, 2, 2, 146, 147, 7, 64, 2, 2, 147, 58,
	3, 2, 2, 2, 148, 149, 7, 64, 2, 2, 149, 150, 7, 63, 2, 2, 150, 60, 3, 2,
	2, 2, 151, 152, 7, 63, 2, 2, 152, 153, 7, 63, 2, 2, 153, 62, 3, 2, 2, 2,
	154, 156, 9, 2, 2, 2, 155, 154, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157,
	155, 3, 2, 2, 2, 157, 158, 3, 2, 2, 2, 158, 64, 3, 2, 2, 2, 159, 161, 9,
	3, 2, 2, 160, 159, 3, 2, 2, 2, 161, 162, 3, 2, 2, 2, 162, 160, 3, 2, 2,
	2, 162, 163, 3, 2, 2, 2, 163, 66, 3, 2, 2, 2, 164, 166, 9, 4, 2, 2, 165,
	164, 3, 2, 2, 2, 166, 167, 3, 2, 2, 2, 167, 165, 3, 2, 2, 2, 167, 168,
	3, 2, 2, 2, 168, 169, 3, 2, 2, 2, 169, 170, 8, 34, 2, 2, 170, 68, 3, 2,
	2, 2, 6, 2, 157, 162, 167, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "';'", "','", "'('", "')'", "'['", "']'", "'f'", "'{'", "'}'", "'='",
	"'*'", "'/'", "'+'", "'-'", "'|'", "'&'", "'if'", "'while'", "'for'", "'elif'",
	"'else'", "'true'", "'false'", "'||'", "'&&'", "'<'", "'<='", "'>'", "'>='",
	"'=='",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "MUL", "DIV", "ADD", "SUB",
	"BITWISE_OR", "BITWISE_AND", "IF", "WHILE", "FOR", "ELIF", "ELSE", "TRUE",
	"FALSE", "OR", "AND", "LT", "LTE", "GT", "GTE", "EQ", "NUMBER", "IDENT",
	"WHITESPACE",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "MUL", "DIV", "ADD", "SUB", "BITWISE_OR", "BITWISE_AND", "IF",
	"WHILE", "FOR", "ELIF", "ELSE", "TRUE", "FALSE", "OR", "AND", "LT", "LTE",
	"GT", "GTE", "EQ", "NUMBER", "IDENT", "WHITESPACE",
}

type CalcLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewCalcLexer(input antlr.CharStream) *CalcLexer {

	l := new(CalcLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Calc.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// CalcLexer tokens.
const (
	CalcLexerT__0        = 1
	CalcLexerT__1        = 2
	CalcLexerT__2        = 3
	CalcLexerT__3        = 4
	CalcLexerT__4        = 5
	CalcLexerT__5        = 6
	CalcLexerT__6        = 7
	CalcLexerT__7        = 8
	CalcLexerT__8        = 9
	CalcLexerT__9        = 10
	CalcLexerMUL         = 11
	CalcLexerDIV         = 12
	CalcLexerADD         = 13
	CalcLexerSUB         = 14
	CalcLexerBITWISE_OR  = 15
	CalcLexerBITWISE_AND = 16
	CalcLexerIF          = 17
	CalcLexerWHILE       = 18
	CalcLexerFOR         = 19
	CalcLexerELIF        = 20
	CalcLexerELSE        = 21
	CalcLexerTRUE        = 22
	CalcLexerFALSE       = 23
	CalcLexerOR          = 24
	CalcLexerAND         = 25
	CalcLexerLT          = 26
	CalcLexerLTE         = 27
	CalcLexerGT          = 28
	CalcLexerGTE         = 29
	CalcLexerEQ          = 30
	CalcLexerNUMBER      = 31
	CalcLexerIDENT       = 32
	CalcLexerWHITESPACE  = 33
)
